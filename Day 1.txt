import numpy as np
import pandas as pd
from numpy import math
import plotly.express as px
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

import sklearn
import sklearn.datasets
import sklearn.ensemble
import numpy as np

data_ = pd.read_csv('/content/drive/MyDrive/Data/creit_card_default_prediction.csv', header = 1)

data_.head()

data_.shape

data.info()

data.describe()

#check for duplicates
print(len(data[data.duplicated()]))

#renaming for better convinience
data.rename(columns={'default payment next month' : 'default_payment_next_month'}, inplace=True)
data.rename(columns={'PAY_0' : 'PAY_1'}, inplace=True)

data['default_payment_next_month'].value_counts().sort_index()

#check target variable value proportion
plt.figure(figsize=(10,5))
sns.countplot(x = 'default_payment_next_month', data = data)

data['default_payment_next_month'].value_counts(normalize=True)

continous_features = ['LIMIT_BAL', 'BILL_AMT1', 'BILL_AMT2',
       'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1',
       'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6' ]


plt.figure(figsize=(10,5))
for col in continous_features:
    fig = plt.figure(figsize=(9, 6))
    ax = fig.gca()
    continous = data[col]
    sns.distplot(data[col], kde=True,ax=ax, color = 'g')
    ax.axvline(continous.mean(), color='magenta', linestyle='dashed', linewidth=2)
    ax.axvline(continous.median(), color='cyan', linestyle='dashed', linewidth=2)    
    ax.set_title(col)
plt.show()


for col in continous_features:
    fig = plt.figure(figsize=(9, 6))
    continous = data[col]
    label = data['default_payment_next_month']
    sns.violinplot(x=label, y=continous)
    plt.xlabel('default_payment_next_month')
    plt.ylabel(col)
plt.show()

categorical_features = ['SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_1','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6',]

plt.figure(figsize=(10,5))
for col in categorical_features:
    fig = plt.figure(figsize=(9, 6))
    categorical = data[col]
    sns.countplot(data[col])
plt.show()

plt.figure(figsize=(10,5))
for col in categorical_features:
    fig = plt.figure(figsize=(9, 6))
    sns.boxplot(x='default_payment_next_month', y =col, data = data)
plt.show()

plt.figure(figsize=(20,8))
sns.countplot(x = 'EDUCATION',hue = 'default_payment_next_month', data = data)

plt.figure(figsize=(20,15))
sns.heatmap(data.corr(),annot=True,cmap="Greens")

data['EDUCATION'].value_counts()

data["EDUCATION"] = data["EDUCATION"].replace({5:4,6:4,0:4})
data["EDUCATION"].value_counts()

plt.figure(figsize=(10,5))
sns.countplot(x = 'EDUCATION', data = data)

data['MARRIAGE'].value_counts()

data["MARRIAGE"] = data["MARRIAGE"].replace({0:3})
data["MARRIAGE"].value_counts()

plt.figure(figsize=(10,5))
sns.countplot(x = 'MARRIAGE', data = data)

# counts the age data set
data['AGE'].unique()

plt.figure(figsize=(10,5))
sns.boxplot(x = 'AGE', data = data)

def set_age(x):
  if x>60:
    return 60
  else:
    return x

plt.figure(figsize=(15,8))
sns.countplot(x = 'AGE', data = data)

#target variable VS Sex feature
plt.figure(figsize=(10,5))
sns.countplot(x = 'SEX', hue = 'default_payment_next_month', data = data)

#target variable VS Age Feature
plt.figure(figsize=(20,8))
sns.countplot(x = 'AGE',hue = 'default_payment_next_month', data = data)

#target variable VS Education Feature
plt.figure(figsize=(20,8))
sns.countplot(x = 'EDUCATION',hue = 'default_payment_next_month', data = data)

#target variable VS Marriage Feature
plt.figure(figsize=(20,8))
sns.countplot(x = 'MARRIAGE',hue = 'default_payment_next_month', data = data)